
- name: set fact for ruby version install
  set_fact:
    ruby_version_name: ruby-{{ install_version }}
    ruby_archive_name: ruby-{{ install_version }}-{{ ansible_os_family|lower }}-{{ ansible_architecture }}.tar.gz
    ruby_install_path: /opt/rubies/ruby-{{ install_version }}

- name: check to see if local file is available
  local_action: stat path={{ binary_path }}/{{ ruby_archive_name }} follow=true
  register: ruby_archive_local
  become: no

- name: check if ruby binary is available on remote system
  stat: path="/var/tmp/{{ ruby_archive_name }}"
  register: ruby_archive_remote

- name: check if ruby is already installed
  stat: path="{{ ruby_install_path }}"
  register: ruby_version_installed

- name: copy file from local to remote if exists
  copy: src="{{ ruby_archive_name }}" dest="/var/tmp/{{ ruby_archive_name }}"
  when: (ruby_version_installed.stat.exists == False) and (ruby_archive_remote.stat.exists == False) and (ruby_archive_local.stat.exists == True)

- name: check if ruby binary is available on remote system # retry after new archive created
  stat: path="/var/tmp/{{ ruby_archive_name }}"
  register: ruby_archive_remote

- fail:
    msg: "No binary file {{ ruby_archive_name }} can be found locally or remotely.  Please verify that {{ ruby_archive_name }} exists!"
  when: (ruby_version_installed.stat.exists == False) and (ruby_archive_remote.stat.exists == False)

- name: install ruby {{ install_version }} from archive
  unarchive: copy=no src=/var/tmp/{{ ruby_archive_name }} dest="/opt/rubies"
  become: yes
  register: install_ruby_from_archive
  when: (ruby_version_installed.stat.exists == False) and (ruby_archive_remote.stat.exists == True)

